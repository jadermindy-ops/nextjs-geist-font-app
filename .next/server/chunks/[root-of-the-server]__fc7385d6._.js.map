{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/inventory.ts"],"sourcesContent":["import { Produto, Movimentacao, EstoqueData } from '@/types';\n\nconst STORAGE_KEY = 'uniform_inventory';\n\nclass InventoryManager {\n  private data: EstoqueData;\n\n  constructor() {\n    this.data = this.loadData();\n  }\n\n  private loadData(): EstoqueData {\n    if (typeof window === 'undefined') {\n      return { produtos: {}, movimentacoes: [] };\n    }\n\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY);\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        // Converter strings de data de volta para objetos Date\n        Object.values(parsed.produtos).forEach((produto: any) => {\n          produto.ultimaMovimentacao = new Date(produto.ultimaMovimentacao);\n        });\n        parsed.movimentacoes.forEach((mov: any) => {\n          mov.data = new Date(mov.data);\n        });\n        return parsed;\n      }\n    } catch (error) {\n      console.error('Erro ao carregar dados do estoque:', error);\n    }\n\n    return { produtos: {}, movimentacoes: [] };\n  }\n\n  private saveData(): void {\n    if (typeof window === 'undefined') return;\n    \n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(this.data));\n    } catch (error) {\n      console.error('Erro ao salvar dados do estoque:', error);\n    }\n  }\n\n  addStock(codigo: string, quantidade: number, dadosProduto?: Partial<Produto>): boolean {\n    try {\n      const agora = new Date();\n      \n      if (this.data.produtos[codigo]) {\n        // Produto já existe, apenas adiciona quantidade\n        this.data.produtos[codigo].quantidade += quantidade;\n        this.data.produtos[codigo].ultimaMovimentacao = agora;\n      } else {\n        // Novo produto\n        const novoProduto: Produto = {\n          id: codigo,\n          nome: dadosProduto?.nome || `Uniforme ${codigo}`,\n          codigo,\n          tamanho: dadosProduto?.tamanho || 'M',\n          cor: dadosProduto?.cor || 'Azul',\n          quantidade,\n          estoqueMinimo: 10,\n          ultimaMovimentacao: agora\n        };\n        this.data.produtos[codigo] = novoProduto;\n      }\n\n      // Registra movimentação\n      const movimentacao: Movimentacao = {\n        id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        produtoId: codigo,\n        tipo: 'entrada',\n        quantidade,\n        data: agora,\n        observacoes: 'Entrada via nota fiscal'\n      };\n      this.data.movimentacoes.push(movimentacao);\n\n      this.saveData();\n      return true;\n    } catch (error) {\n      console.error('Erro ao adicionar estoque:', error);\n      return false;\n    }\n  }\n\n  removeStock(codigo: string, quantidade: number = 1): { success: boolean; message: string; novoEstoque?: number } {\n    try {\n      const produto = this.data.produtos[codigo];\n      \n      if (!produto) {\n        return { success: false, message: 'Produto não encontrado no estoque' };\n      }\n\n      if (produto.quantidade < quantidade) {\n        return { \n          success: false, \n          message: `Estoque insuficiente. Disponível: ${produto.quantidade} unidades` \n        };\n      }\n\n      // Remove do estoque\n      produto.quantidade -= quantidade;\n      produto.ultimaMovimentacao = new Date();\n\n      // Registra movimentação\n      const movimentacao: Movimentacao = {\n        id: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        produtoId: codigo,\n        tipo: 'saida',\n        quantidade,\n        data: new Date(),\n        observacoes: 'Saída via código de barras'\n      };\n      this.data.movimentacoes.push(movimentacao);\n\n      this.saveData();\n\n      let message = `Saída registrada. Estoque atual: ${produto.quantidade} unidades`;\n      if (produto.quantidade <= produto.estoqueMinimo) {\n        message += ` ⚠️ ALERTA: Estoque baixo!`;\n      }\n\n      return { \n        success: true, \n        message, \n        novoEstoque: produto.quantidade \n      };\n    } catch (error) {\n      console.error('Erro ao remover estoque:', error);\n      return { success: false, message: 'Erro interno do sistema' };\n    }\n  }\n\n  getStock(codigo: string): number {\n    return this.data.produtos[codigo]?.quantidade || 0;\n  }\n\n  getProduct(codigo: string): Produto | null {\n    return this.data.produtos[codigo] || null;\n  }\n\n  getAllProducts(): Produto[] {\n    return Object.values(this.data.produtos);\n  }\n\n  getLowStockAlerts(): Produto[] {\n    return Object.values(this.data.produtos).filter(\n      produto => produto.quantidade <= produto.estoqueMinimo\n    );\n  }\n\n  getRecentMovements(limit: number = 10): Movimentacao[] {\n    return this.data.movimentacoes\n      .sort((a, b) => b.data.getTime() - a.data.getTime())\n      .slice(0, limit);\n  }\n\n  getMovementsByFilter(filter: {\n    startDate?: Date;\n    endDate?: Date;\n    tipo?: 'entrada' | 'saida';\n  }): Movimentacao[] {\n    let filteredMovements = [...this.data.movimentacoes];\n\n    // Filtrar por data de início\n    if (filter.startDate) {\n      filteredMovements = filteredMovements.filter(\n        mov => mov.data >= filter.startDate!\n      );\n    }\n\n    // Filtrar por data de fim\n    if (filter.endDate) {\n      // Adicionar 23:59:59 à data de fim para incluir todo o dia\n      const endDate = new Date(filter.endDate);\n      endDate.setHours(23, 59, 59, 999);\n      filteredMovements = filteredMovements.filter(\n        mov => mov.data <= endDate\n      );\n    }\n\n    // Filtrar por tipo\n    if (filter.tipo) {\n      filteredMovements = filteredMovements.filter(\n        mov => mov.tipo === filter.tipo\n      );\n    }\n\n    // Ordenar por data (mais recente primeiro)\n    return filteredMovements.sort((a, b) => b.data.getTime() - a.data.getTime());\n  }\n\n  getAllMovements(): Movimentacao[] {\n    return this.data.movimentacoes.sort((a, b) => b.data.getTime() - a.data.getTime());\n  }\n\n  getTotalProducts(): number {\n    return Object.keys(this.data.produtos).length;\n  }\n\n  getTotalStock(): number {\n    return Object.values(this.data.produtos).reduce((total, produto) => total + produto.quantidade, 0);\n  }\n}\n\n// Singleton instance\nlet inventoryManager: InventoryManager | null = null;\n\nexport function getInventoryManager(): InventoryManager {\n  if (!inventoryManager) {\n    inventoryManager = new InventoryManager();\n  }\n  return inventoryManager;\n}\n\nexport default InventoryManager;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/dashboard/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { getInventoryManager } from '@/lib/inventory';\nimport { ApiResponse } from '@/types';\n\nexport async function GET(): Promise<NextResponse> {\n  try {\n    const inventoryManager = getInventoryManager();\n    \n    const produtos = inventoryManager.getAllProducts();\n    const alertasEstoqueBaixo = inventoryManager.getLowStockAlerts();\n    const movimentacoesRecentes = inventoryManager.getRecentMovements(10);\n    \n    const estatisticas = {\n      totalProdutos: inventoryManager.getTotalProducts(),\n      totalEstoque: inventoryManager.getTotalStock(),\n      produtosComEstoqueBaixo: alertasEstoqueBaixo.length,\n      ultimasMovimentacoes: movimentacoesRecentes.length\n    };\n\n    return NextResponse.json<ApiResponse>({\n      success: true,\n      data: {\n        produtos,\n        alertasEstoqueBaixo,\n        movimentacoesRecentes,\n        estatisticas\n      }\n    });\n\n  } catch (error) {\n    console.error('Erro ao buscar dados do dashboard:', error);\n    return NextResponse.json<ApiResponse>({\n      success: false,\n      error: 'Erro interno do servidor'\n    }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,mBAAmB,CAAA,GAAA,yHAAA,CAAA,sBAAmB,AAAD;QAE3C,MAAM,WAAW,iBAAiB,cAAc;QAChD,MAAM,sBAAsB,iBAAiB,iBAAiB;QAC9D,MAAM,wBAAwB,iBAAiB,kBAAkB,CAAC;QAElE,MAAM,eAAe;YACnB,eAAe,iBAAiB,gBAAgB;YAChD,cAAc,iBAAiB,aAAa;YAC5C,yBAAyB,oBAAoB,MAAM;YACnD,sBAAsB,sBAAsB,MAAM;QACpD;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAc;YACpC,SAAS;YACT,MAAM;gBACJ;gBACA;gBACA;gBACA;YACF;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAc;YACpC,SAAS;YACT,OAAO;QACT,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}